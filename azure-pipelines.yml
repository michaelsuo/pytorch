# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
  - job:
    pool:
      name: "Default"
      demands: "gpu"
    displayName: "Build and Test"
    container:
      image: 308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-xenial-cuda9-cudnn7-py3:300
      endpoint: aws_docker
      options: -u 0 --runtime=nvidia
    timeoutInMinutes: 360
    steps:
    - checkout: self
      submodules: "true"
    - bash: |
        set +x
        sudo chown -R suo_azpcontainer:suo_azpcontainer /usr/local
        sudo chown -R suo_azpcontainer:suo_azpcontainer /opt/python
        sudo chown -R suo_azpcontainer:suo_azpcontainer /opt/conda
        .jenkins/pytorch/build.sh
      env:
        BUILD_ENVIRONMENT: pytorch-linux-xenial-cuda9-cudnn7-py3-build
        SCCACHE_BUCKET: "ossci-compiler-cache-circleci-v2"
        AWS_ACCESS_KEY_ID: $(SCCACHE_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(SCCACHE_SECRET)
      displayName: 'Build'
    - bash: |
        set +x
        set -e
        # Set up NVIDIA docker repo
        curl -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
        echo "deb https://nvidia.github.io/libnvidia-container/ubuntu16.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
        echo "deb https://nvidia.github.io/nvidia-container-runtime/ubuntu16.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
        echo "deb https://nvidia.github.io/nvidia-docker/ubuntu16.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list

        sudo apt-get -y update
        sudo apt-get -y remove linux-image-generic linux-headers-generic linux-generic docker-ce
        # WARNING: Docker version is hardcoded here; you must update the
        # version number below for docker-ce and nvidia-docker2 to get newer
        # versions of Docker.  We hardcode these numbers because we kept
        # getting broken CI when Docker would update their docker version,
        # and nvidia-docker2 would be out of date for a day until they
        # released a newer version of their package.
        #
        # How to figure out what the correct versions of these packages are?
        # My preferred method is to start a Docker instance of the correct
        # Ubuntu version (e.g., docker run -it ubuntu:16.04) and then ask
        # apt what the packages you need are.  Note that the CircleCI image
        # comes with Docker.
        sudo apt-get -y install \
          linux-headers-$(uname -r) \
          linux-image-generic \
          moreutils \
          docker-ce=5:18.09.4~3-0~ubuntu-xenial \
          nvidia-container-runtime=2.0.0+docker18.09.4-1 \
          nvidia-docker2=2.0.3+docker18.09.4-1 \
          expect-dev
        export PATH="/home/suo_azpcontainer/.local/bin:$PATH"
        .jenkins/pytorch/test.sh
      env:
        BUILD_ENVIRONMENT: pytorch-linux-xenial-cuda9-cudnn7-py3-test
        USE_CUDA_DOCKER_RUNTIME: 1
      displayName: 'Test'

# jobs:
#   - job:
#     pool: "Default"
#     displayName: "Build and Test"
#     container:
#       image: 308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-trusty-py3.5:300
#       endpoint: aws_docker
#       options: -u 0
#     timeoutInMinutes: 120
#     steps:
#     - checkout: self
#       submodules: "true"
#     - bash: |
#         set +x
#         sudo chown -R azureuser_azpcontainer:azureuser_azpcontainer /usr/local
#         sudo chown -R azureuser_azpcontainer:azureuser_azpcontainer /opt/python
#         .jenkins/pytorch/build.sh
#       env:
#         BUILD_ENVIRONMENT: pytorch-linux-trusty-py3.5-build
#         SCCACHE_BUCKET: "ossci-compiler-cache-circleci-v2"
#         AWS_ACCESS_KEY_ID: $(SCCACHE_ACCESS_KEY_ID)
#         AWS_SECRET_ACCESS_KEY: $(SCCACHE_SECRET)
#       displayName: 'Build'
#     - bash: |
#         set +x
#         set -e
#         export PATH="/home/azureuser_azpcontainer/.local/bin:$PATH"
#         .jenkins/pytorch/test.sh
#       env:
#         BUILD_ENVIRONMENT: pytorch-linux-trusty-py3.5-test
#       displayName: 'Test'
